const types = @import("../core/types.zig");
const basic = @import("basic.zig");

// All image modifier definitions
pub const modifiers = [_]types.Argument{
    .{
        .names = .{ .single = "invert" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Invert the colors of the current image",
        .usage = "invert",
        .func = basic.invertColors,
    },
    .{
        .names = .{ .single = "resize" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{ u16, u16 },
        .description = "Resize the image using nearest-neighbor sampling",
        .usage = "resize <width> <height>",
        .func = basic.resizeImage,
    },
    .{
        .names = .{ .single = "crop" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{ u16, u16, u16, u16 },
        .description = "Crop the image using top-left coordinate and size",
        .usage = "crop <x> <y> <width> <height>",
        .func = basic.cropImage,
    },
    .{
        .names = .{ .single = "rotate" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f64},
        .description = "Rotate the image clockwise by any angle (auto-resizes canvas)",
        .usage = "rotate <degrees>",
        .func = basic.rotateImage,
    },
    .{
        .names = .{ .single = "flip" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{[]const u8},
        .description = "Flip the image horizontally or vertically",
        .usage = "flip <horizontal|vertical>",
        .func = basic.flipImage,
    },
    .{
        .names = .{ .single = "grayscale" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Convert the image to grayscale",
        .usage = "grayscale",
        .func = basic.grayscaleImage,
    },
    .{
        .names = .{ .single = "brightness" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{i8},
        .description = "Adjust image brightness",
        .usage = "brightness <value (-128 to 127)>",
        .func = basic.adjustBrightness,
    },
    .{
        .names = .{ .single = "blur" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{u8},
        .description = "Apply a simple box blur",
        .usage = "blur <kernel_size (odd)>",
        .func = basic.blurImage,
    },
    .{
        .names = .{ .single = "saturation" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Adjust color saturation",
        .usage = "saturation <factor>",
        .func = basic.adjustSaturation,
    },
    .{
        .names = .{ .single = "contrast" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Adjust image contrast",
        .usage = "contrast <factor>",
        .func = basic.adjustContrast,
    },
    .{
        .names = .{ .single = "gamma" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Apply gamma correction",
        .usage = "gamma <value>",
        .func = basic.adjustGamma,
    },
    .{
        .names = .{ .single = "sepia" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Apply sepia tone effect",
        .usage = "sepia",
        .func = basic.applySepia,
    },
    .{
        .names = .{ .single = "sharpen" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Sharpen the image",
        .usage = "sharpen",
        .func = basic.sharpenImage,
    },
    .{
        .names = .{ .single = "gaussian-blur" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Apply Gaussian blur with configurable sigma",
        .usage = "gaussian-blur <sigma>",
        .func = basic.gaussianBlurImage,
    },
    .{
        .names = .{ .single = "emboss" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Apply emboss effect for 3D-like appearance",
        .usage = "emboss",
        .func = basic.embossImage,
    },
    .{
        .names = .{ .single = "vignette" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Apply vignette effect to darken image corners",
        .usage = "vignette <intensity (0.0-1.0)>",
        .func = basic.vignetteImage,
    },
    .{
        .names = .{ .single = "posterize" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{u8},
        .description = "Reduce color levels for artistic poster effect",
        .usage = "posterize <levels (2-256)>",
        .func = basic.posterizeImage,
    },
    .{
        .names = .{ .single = "hue-shift" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Shift the hue of all colors in the image",
        .usage = "hue-shift <degrees (-180 to 180)>",
        .func = basic.hueShiftImage,
    },
    .{
        .names = .{ .single = "median-filter" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{u8},
        .description = "Apply median filter for noise reduction",
        .usage = "median-filter <kernel_size (odd)>",
        .func = basic.medianFilterImage,
    },
    .{
        .names = .{ .single = "threshold" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{u8},
        .description = "Convert image to pure black and white based on luminance threshold",
        .usage = "threshold <value (0-255)>",
        .func = basic.thresholdImage,
    },
    .{
        .names = .{ .single = "solarize" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{u8},
        .description = "Invert colors above threshold for artistic effect",
        .usage = "solarize <threshold (0-255)>",
        .func = basic.solarizeImage,
    },
    .{
        .names = .{ .single = "edge-detect" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Detect edges using Sobel operator",
        .usage = "edge-detect",
        .func = basic.edgeDetectImage,
    },
    .{
        .names = .{ .single = "pixelate" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{u8},
        .description = "Apply pixelation/mosaic effect",
        .usage = "pixelate <block_size>",
        .func = basic.pixelateImage,
    },
    .{
        .names = .{ .single = "noise" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Add random noise to image",
        .usage = "noise <amount (0.0-1.0)>",
        .func = basic.addNoiseImage,
    },
    .{
        .names = .{ .single = "exposure" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Adjust exposure (like camera EV)",
        .usage = "exposure <value (-2.0 to 2.0)>",
        .func = basic.adjustExposure,
    },
    .{
        .names = .{ .single = "vibrance" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{f32},
        .description = "Adjust vibrance (smart saturation)",
        .usage = "vibrance <factor>",
        .func = basic.adjustVibrance,
    },
    .{
        .names = .{ .single = "equalize" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{},
        .description = "Apply histogram equalization for better contrast",
        .usage = "equalize",
        .func = basic.equalizeImage,
    },
    .{
        .names = .{ .single = "colorize" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{ u8, u8, u8, f32 },
        .description = "Colorize/tint image with RGB color",
        .usage = "colorize <r> <g> <b> <intensity (0.0-1.0)>",
        .func = basic.colorizeImage,
    },
    .{
        .names = .{ .single = "duotone" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{ u8, u8, u8, u8, u8, u8 },
        .description = "Apply duotone effect (Spotify-style)",
        .usage = "duotone <dark_r> <dark_g> <dark_b> <light_r> <light_g> <light_b>",
        .func = basic.duotoneImage,
    },
    .{
        .names = .{ .single = "oil-painting" },
        .option_type = types.ArgType.Modifier,
        .param_types = &[_]type{usize},
        .description = "Apply oil painting artistic effect",
        .usage = "oil-painting <radius>",
        .func = basic.oilPaintingImage,
    },
};
